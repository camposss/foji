// Code generated by foji {{ version }}, template: {{ templateFile }}; DO NOT EDIT.

package {{ .PackageName }}

import (
    "context"

    "github.com/pkg/errors"
{{- range .Imports }}
    "{{ . }}"
{{- end }}
)

{{- range .Queries }}
{{ if .Result.GenerateType }}
// {{.Result.Type}} represents a result from '{{.Name}}'.
type {{.Result.Type}} struct {
{{- range .Result.Params.ByOrdinal }}
    {{ pascal .Name }} {{ $.GetType . $.PackageName }}  `json:"{{ .Name }},omitempty"` // {{ .Type }}
{{- end }}
}
{{- end }}

// {{.Name}} returns {{.Result.Type}}
// {{.Comment}}
func (r Repo) {{ .Name }}(ctx context.Context{{if gt (len .Params) 0}},{{end}} {{ $.Parameterize .Params.ByOrdinal "%s %s" $.PackageName }}) ({{ if .IsType "query" }}[]{{ end }}*{{$.GetType .Result.TypeParam $pkgName}}, error) {
    query := `{{ .SQL }}`

    {{- if .IsType "query" }}
    q, err := r.db.Query(ctx, query{{if gt (len .Params) 0}},{{end}} {{ csv (.Params.ByQuery.Names.Camel)}})
    if err != nil {
        return nil, errors.Wrap(err, "{{.Name}}.Query")
    }
    var result []*{{.Result.Type}}
    for q.Next() {
        row := {{.Result.Type}}{}
        err := q.Scan({{ csv (.Result.Params.ByQuery.Names.Pascal.Sprintf "&row.%s")}})
        if err != nil {
            return nil, errors.Wrap(err, "{{ .Name }}.scan") // notest
        }
        result = append(result, &row)
    }
    return result, nil
    {{- else }}
    q := r.db.QueryRow(ctx, query{{if gt (len .Params) 0}},{{end}} {{ csv (.Params.ByQuery.Names.Camel) }})
        {{/*        return scanOne{{$goName}}(q)*/}}
    {{- end }}

}
{{- end }}
