// Code generated by foji 0.3, template: foji/openapi/handler.go.tpl; DO NOT EDIT.

package http

import (
	"context"
	"encoding/json"

	"github.com/bir/iken/fastctx"
	"github.com/bir/iken/fastutil"
	"github.com/bir/iken/validation"
	"github.com/fasthttp/router"
	"github.com/gofoji/foji/test"
	"github.com/valyala/fasthttp"
)

type Service interface {
	FindPets(ctx context.Context, tags []string, limit *int32) ([]test.Pet, error)
	AddPet(ctx context.Context, user *test.User, testNewPet test.NewPet) (*test.Pet, error)
	DeletePet(ctx context.Context, id int64) error
	FindPetByID(ctx context.Context, id int64) (*test.Pet, error)
}

type AuthFunc = func(ctx *fasthttp.RequestCtx) (*test.User, error)

type OpenAPIHandlers struct {
	service      Service
	errorHandler fastutil.ErrorHandlerFunc
	apiKeyAuth   AuthFunc
	queryKeyAuth AuthFunc
}

func RegisterHTTP(svc Service, r *router.Router, e fastutil.ErrorHandlerFunc, apiKeyAuth, queryKeyAuth AuthFunc) *OpenAPIHandlers {
	s := OpenAPIHandlers{service: svc, errorHandler: e, apiKeyAuth: apiKeyAuth, queryKeyAuth: queryKeyAuth}

	r.GET("/pets", s.FindPets)
	r.POST("/pets", s.AddPet)
	r.DELETE("/pets/{id}", s.DeletePet)
	r.GET("/pets/{id}", s.FindPetByID)

	return &s
}

func (h *OpenAPIHandlers) doJSONWrite(ctx *fasthttp.RequestCtx, code int, obj interface{}) {
	if err := fastutil.JSONWrite(ctx, code, obj); err != nil {
		h.errorHandler(ctx, err)
	}
}

func (h *OpenAPIHandlers) FindPets(ctx *fasthttp.RequestCtx) {
	var err error
	fastctx.SetOp(ctx, "findPets")

	tags := fastutil.QueryStringsOptional(ctx, "tags")
	limit := fastutil.QueryInt32Optional(ctx, "limit")

	response, err := h.service.FindPets(ctx, tags, limit)
	if err != nil {
		h.errorHandler(ctx, err)
		return
	}

	h.doJSONWrite(ctx, 200, response)
}

func (h *OpenAPIHandlers) AddPet(ctx *fasthttp.RequestCtx) {
	var err error
	fastctx.SetOp(ctx, "addPet")

	var authUser *test.User

	authUser, err = h.queryKeyAuth(ctx)
	if err != nil {
		h.errorHandler(ctx, err)
		return
	}

	if authUser == nil {
		h.errorHandler(ctx, fastutil.ErrUnauthorized)
		return
	}

	body := test.NewPet{}

	err = json.Unmarshal(ctx.PostBody(), &body)
	if err != nil {
		h.errorHandler(ctx, err)
		return
	}

	err = body.Validate()
	if err != nil {
		h.errorHandler(ctx, err)
		return
	}

	response, err := h.service.AddPet(ctx, authUser, body)
	if err != nil {
		h.errorHandler(ctx, err)
		return
	}

	h.doJSONWrite(ctx, 201, response)
}

func (h *OpenAPIHandlers) DeletePet(ctx *fasthttp.RequestCtx) {
	var err error
	fastctx.SetOp(ctx, "deletePet")

	id, err := fastutil.PathInt64(ctx, "id")
	if err != nil {
		h.errorHandler(ctx, validation.New("id", err.Error()))
		return
	}

	err = h.service.DeletePet(ctx, id)
	if err != nil {
		h.errorHandler(ctx, err)
		return
	}

	ctx.Response.SetStatusCode(204)
}

func (h *OpenAPIHandlers) FindPetByID(ctx *fasthttp.RequestCtx) {
	var err error
	fastctx.SetOp(ctx, "find pet by id")

	id, err := fastutil.PathInt64(ctx, "id")
	if err != nil {
		h.errorHandler(ctx, validation.New("id", err.Error()))
		return
	}

	response, err := h.service.FindPetByID(ctx, id)
	if err != nil {
		h.errorHandler(ctx, err)
		return
	}

	h.doJSONWrite(ctx, 200, response)
}
